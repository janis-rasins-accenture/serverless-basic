plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb
  - serverless-offline
app: serverless-basic
service: serverless-basic
useDotenv: true
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'local'}
  region: ${env:REGION}
  timeout: 30
  memorySize: 256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${env:REGION}:*:*'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
        - 'lambda:InvokeAsync'
      Resource: '*'
  environment:
    IS_OFFLINE: ${env:IS_OFFLINE}
    LAMBDA_ENDPOINT: ${env:LAMBDA_ENDPOINT}
    LOCAL_LAMBDA_ENDPOINT: ${env:LOCAL_LAMBDA_ENDPOINT}

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
  serverless-dynamodb:
    stages:
      - local
    start:
      docker: true
      port: 8010
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      test:
        sources:
          - table: usersTable
            rawsources: [./dynamodb-tables/usersTable-data.json]
  tableNames:
    usersTable: 'usersTable'

functions:
  hello-world:
    handler: src/handlers/hello/hello.handler
    description: 'offline example'
    events:
      - httpApi:
          path: /${self:provider.stage}/hello
          method: GET
  createUser:
    handler: src/handlers/users/createUser.handler
    description: 'Create a single user'
    events:
      - httpApi:
          path: /${self:provider.stage}/user
          method: POST
    environment:
      TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
  importUsers:
    handler: src/handlers/users/importUsers.handler
    events:
      - httpApi:
          path: /${self:provider.stage}/users
          method: POST
    environment:
      TABLE_NAME_USERS: ${env:TABLE_NAME_USERS}
      LAMBDA_NAME_USERS_CREATED: ${self:app}-${self:provider.stage}-usersCreated


resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: isActive
            AttributeType: N
          - AttributeName: firstName
            AttributeType: S
          - AttributeName: userName
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        GlobalSecondaryIndexes:
          - IndexName: isActiveIndex
            KeySchema:
              - AttributeName: isActive
                KeyType: HASH
              - AttributeName: firstName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3
          - IndexName: userNameIndex
            KeySchema:
              - AttributeName: userName
                KeyType: HASH
              - AttributeName: firstName
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 3
              WriteCapacityUnits: 3